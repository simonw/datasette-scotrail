title: ScotRail announcements
description_html: |-
  <p>ScotRail released an audio file of all of their announcements, voiced by <a href="https://www.alisonmckay.com/">Alison McKay</a>.</p>

  <p>Matt Eason and a team of volunteers <a href="https://github.com/matteason/scotrail-announcements-june-2022/blob/main/README.md">split the file</a> into separate mp3s and transcribed them.</p>

  <p>This Datasette instance provides an interface and JSON API to that data.</p>

  <form action="/scotrail/announcements" method="GET">
    <p><input name="_search" placeholder="Search for an announcement snippet" type="search"> <input type="submit" value="Search"></p>
  </form>

  <p>Or generate and listen to <a href="/scotrail/random_apology">a random apology</a>.</p>

  <p>You can also <a href="/scotrail/assemble_sentence?terms=i+am+sorry%2C+scotrail%2C+from%2C+bath+spa%2C+is+delayed%2C+due+to%2C+bomb">assemble your own sentence</a> by searching for multiple clips to combine together.</p>

  <p>See <a href="https://simonwillison.net/2022/Aug/21/scotrail/">Analyzing ScotRail audio announcements with Datasetteâ€”from prototype to production</a> for detailed background on this project.</p>
about: simonw/scotrail-datasette
about_url: https://github.com/simonw/scotrail-datasette
source: matteason/scotrail-announcements-june-2022
source_url: https://github.com/matteason/scotrail-announcements-june-2022
databases:
  scotrail:
    tables:
      announcements:
        facets:
        - Category
    queries:
      random_apology:
        hide_sql: true
        sql: |-
          with apology as (
              select Transcription, mp3 from announcements where
                  Category = 'Apology'
              order by random() limit 1
          ),
          train_company as (
              select Transcription, mp3 from announcements where
                  Category = 'Train operating company'
                  and Transcription like '%to%'
              order by random() limit 1
          ),
          destination as (
              select Transcription, mp3 from announcements where
                  Category = 'Destination'
              order by random() limit 1
          ),
          cancelled as (
              select Transcription, mp3 from announcements where
                  Transcription = 'has been cancelled'
              limit 1
          ),
          due_to as (
              select Transcription, mp3 from announcements where
                  Transcription = 'due to'
              limit 1
          ),
          reason as (
              select Transcription, mp3 from announcements where
                  Category = 'Reason'
              order by random() limit 1
          ),
          combined as (
            select 1 as sort, * from apology
            union select 2, * from train_company
            union select 3, * from destination
            union select 4, * from cancelled
            union select 5, * from due_to
            union select 6, * from reason
          )
          select * from combined order by sort
      assemble_sentence:
        description_html: |-
          <p>Enter a sequence of terms separated by commas, like this:</p>

          <p><code>i am sorry, scotrail, from, bath spa, is delayed, due to, bomb</code></p>

          <p>Each term will be treated as a search, and the first, shortest matching clip will be selected.</p>

          <p>You can then hit "Play all" to hear all the clips as a sequence.</p>
        hide_sql: true
        sql: |-
          with phrases as (
            select
              key, value
            from
              json_each('["' || replace(:terms, ',', '","') || '"]')
          ),
          matches as (select
            phrases.key,
            phrases.value,
            (
              select File from announcements
              where announcements.Transcription like '%' || trim(phrases.value) || '%'
              order by length(announcements.Transcription)
              limit 1
            ) as File
          from
            phrases
          ),
          results as (
            select key, announcements.Transcription, announcements.mp3
            from announcements join matches on announcements.File = matches.File
            order by key
          )
          select
            'Combined sentence:' as mp3,
            group_concat(Transcription, ' ') as Transcription,
            -1 as key
          from results
            union
          select
            mp3, Transcription, key
          from results
          order by key